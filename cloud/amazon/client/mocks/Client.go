// Code generated by mockery v1.0.1 DO NOT EDIT.

package mocks

import ec2 "github.com/aws/aws-sdk-go/service/ec2"
import mock "github.com/stretchr/testify/mock"

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// AssociateAddress provides a mock function with given fields: id, allocationID
func (_m *Client) AssociateAddress(id string, allocationID string) error {
	ret := _m.Called(id, allocationID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(id, allocationID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AuthorizeSecurityGroup provides a mock function with given fields: name, src, ranges
func (_m *Client) AuthorizeSecurityGroup(name string, src string, ranges []*ec2.IpPermission) error {
	ret := _m.Called(name, src, ranges)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, []*ec2.IpPermission) error); ok {
		r0 = rf(name, src, ranges)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CancelSpotInstanceRequests provides a mock function with given fields: ids
func (_m *Client) CancelSpotInstanceRequests(ids []string) error {
	ret := _m.Called(ids)

	var r0 error
	if rf, ok := ret.Get(0).(func([]string) error); ok {
		r0 = rf(ids)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateSecurityGroup provides a mock function with given fields: name, description
func (_m *Client) CreateSecurityGroup(name string, description string) (string, error) {
	ret := _m.Called(name, description)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(name, description)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(name, description)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAddresses provides a mock function with given fields:
func (_m *Client) DescribeAddresses() ([]*ec2.Address, error) {
	ret := _m.Called()

	var r0 []*ec2.Address
	if rf, ok := ret.Get(0).(func() []*ec2.Address); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ec2.Address)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeInstances provides a mock function with given fields: _a0
func (_m *Client) DescribeInstances(_a0 []*ec2.Filter) (*ec2.DescribeInstancesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *ec2.DescribeInstancesOutput
	if rf, ok := ret.Get(0).(func([]*ec2.Filter) *ec2.DescribeInstancesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeInstancesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]*ec2.Filter) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeSecurityGroup provides a mock function with given fields: name
func (_m *Client) DescribeSecurityGroup(name string) ([]*ec2.SecurityGroup, error) {
	ret := _m.Called(name)

	var r0 []*ec2.SecurityGroup
	if rf, ok := ret.Get(0).(func(string) []*ec2.SecurityGroup); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ec2.SecurityGroup)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeSpotInstanceRequests provides a mock function with given fields: ids, filters
func (_m *Client) DescribeSpotInstanceRequests(ids []string, filters []*ec2.Filter) ([]*ec2.SpotInstanceRequest, error) {
	ret := _m.Called(ids, filters)

	var r0 []*ec2.SpotInstanceRequest
	if rf, ok := ret.Get(0).(func([]string, []*ec2.Filter) []*ec2.SpotInstanceRequest); ok {
		r0 = rf(ids, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ec2.SpotInstanceRequest)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string, []*ec2.Filter) error); ok {
		r1 = rf(ids, filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeVolumes provides a mock function with given fields: id
func (_m *Client) DescribeVolumes(id string) ([]*ec2.Volume, error) {
	ret := _m.Called(id)

	var r0 []*ec2.Volume
	if rf, ok := ret.Get(0).(func(string) []*ec2.Volume); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ec2.Volume)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateAddress provides a mock function with given fields: associationID
func (_m *Client) DisassociateAddress(associationID string) error {
	ret := _m.Called(associationID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(associationID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RequestSpotInstances provides a mock function with given fields: spotPrice, count, launchSpec
func (_m *Client) RequestSpotInstances(spotPrice string, count int64, launchSpec *ec2.RequestSpotLaunchSpecification) ([]*ec2.SpotInstanceRequest, error) {
	ret := _m.Called(spotPrice, count, launchSpec)

	var r0 []*ec2.SpotInstanceRequest
	if rf, ok := ret.Get(0).(func(string, int64, *ec2.RequestSpotLaunchSpecification) []*ec2.SpotInstanceRequest); ok {
		r0 = rf(spotPrice, count, launchSpec)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ec2.SpotInstanceRequest)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int64, *ec2.RequestSpotLaunchSpecification) error); ok {
		r1 = rf(spotPrice, count, launchSpec)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RevokeSecurityGroup provides a mock function with given fields: name, ranges
func (_m *Client) RevokeSecurityGroup(name string, ranges []*ec2.IpPermission) error {
	ret := _m.Called(name, ranges)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []*ec2.IpPermission) error); ok {
		r0 = rf(name, ranges)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RunInstances provides a mock function with given fields: _a0
func (_m *Client) RunInstances(_a0 *ec2.RunInstancesInput) (*ec2.Reservation, error) {
	ret := _m.Called(_a0)

	var r0 *ec2.Reservation
	if rf, ok := ret.Get(0).(func(*ec2.RunInstancesInput) *ec2.Reservation); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.Reservation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.RunInstancesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TerminateInstances provides a mock function with given fields: ids
func (_m *Client) TerminateInstances(ids []string) error {
	ret := _m.Called(ids)

	var r0 error
	if rf, ok := ret.Get(0).(func([]string) error); ok {
		r0 = rf(ids)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
