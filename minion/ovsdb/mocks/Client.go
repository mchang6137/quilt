// Code generated by mockery v1.0.1 DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import ovsdb "github.com/quilt/quilt/minion/ovsdb"

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// CreateACL provides a mock function with given fields: lswitch, direction, priority, match, action
func (_m *Client) CreateACL(lswitch string, direction string, priority int, match string, action string) error {
	ret := _m.Called(lswitch, direction, priority, match, action)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, int, string, string) error); ok {
		r0 = rf(lswitch, direction, priority, match, action)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateLoadBalancer provides a mock function with given fields: lswitch, name, vips
func (_m *Client) CreateLoadBalancer(lswitch string, name string, vips map[string]string) error {
	ret := _m.Called(lswitch, name, vips)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, map[string]string) error); ok {
		r0 = rf(lswitch, name, vips)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateLogicalRouter provides a mock function with given fields: lrouter
func (_m *Client) CreateLogicalRouter(lrouter string) error {
	ret := _m.Called(lrouter)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(lrouter)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateLogicalSwitch provides a mock function with given fields: lswitch
func (_m *Client) CreateLogicalSwitch(lswitch string) error {
	ret := _m.Called(lswitch)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(lswitch)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateRouterPort provides a mock function with given fields: lrouter, lport
func (_m *Client) CreateRouterPort(lrouter string, lport ovsdb.RouterPort) error {
	ret := _m.Called(lrouter, lport)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ovsdb.RouterPort) error); ok {
		r0 = rf(lrouter, lport)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateSwitchPort provides a mock function with given fields: lswitch, lport
func (_m *Client) CreateSwitchPort(lswitch string, lport ovsdb.SwitchPort) error {
	ret := _m.Called(lswitch, lport)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ovsdb.SwitchPort) error); ok {
		r0 = rf(lswitch, lport)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteACL provides a mock function with given fields: lswitch, ovsdbACL
func (_m *Client) DeleteACL(lswitch string, ovsdbACL ovsdb.ACL) error {
	ret := _m.Called(lswitch, ovsdbACL)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ovsdb.ACL) error); ok {
		r0 = rf(lswitch, ovsdbACL)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteLoadBalancer provides a mock function with given fields: lswitch, lb
func (_m *Client) DeleteLoadBalancer(lswitch string, lb ovsdb.LoadBalancer) error {
	ret := _m.Called(lswitch, lb)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ovsdb.LoadBalancer) error); ok {
		r0 = rf(lswitch, lb)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteRouterPort provides a mock function with given fields: lrouter, lport
func (_m *Client) DeleteRouterPort(lrouter string, lport ovsdb.RouterPort) error {
	ret := _m.Called(lrouter, lport)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ovsdb.RouterPort) error); ok {
		r0 = rf(lrouter, lport)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteSwitchPort provides a mock function with given fields: lswitch, lport
func (_m *Client) DeleteSwitchPort(lswitch string, lport ovsdb.SwitchPort) error {
	ret := _m.Called(lswitch, lport)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ovsdb.SwitchPort) error); ok {
		r0 = rf(lswitch, lport)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Disconnect provides a mock function with given fields:
func (_m *Client) Disconnect() {
	_m.Called()
}

// ListACLs provides a mock function with given fields:
func (_m *Client) ListACLs() ([]ovsdb.ACL, error) {
	ret := _m.Called()

	var r0 []ovsdb.ACL
	if rf, ok := ret.Get(0).(func() []ovsdb.ACL); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ovsdb.ACL)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListLoadBalancers provides a mock function with given fields:
func (_m *Client) ListLoadBalancers() ([]ovsdb.LoadBalancer, error) {
	ret := _m.Called()

	var r0 []ovsdb.LoadBalancer
	if rf, ok := ret.Get(0).(func() []ovsdb.LoadBalancer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ovsdb.LoadBalancer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRouterPorts provides a mock function with given fields:
func (_m *Client) ListRouterPorts() ([]ovsdb.RouterPort, error) {
	ret := _m.Called()

	var r0 []ovsdb.RouterPort
	if rf, ok := ret.Get(0).(func() []ovsdb.RouterPort); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ovsdb.RouterPort)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSwitchPort provides a mock function with given fields: name
func (_m *Client) ListSwitchPort(name string) (ovsdb.SwitchPort, error) {
	ret := _m.Called(name)

	var r0 ovsdb.SwitchPort
	if rf, ok := ret.Get(0).(func(string) ovsdb.SwitchPort); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(ovsdb.SwitchPort)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSwitchPorts provides a mock function with given fields:
func (_m *Client) ListSwitchPorts() ([]ovsdb.SwitchPort, error) {
	ret := _m.Called()

	var r0 []ovsdb.SwitchPort
	if rf, ok := ret.Get(0).(func() []ovsdb.SwitchPort); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ovsdb.SwitchPort)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LogicalRouterExists provides a mock function with given fields: lrouter
func (_m *Client) LogicalRouterExists(lrouter string) (bool, error) {
	ret := _m.Called(lrouter)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(lrouter)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(lrouter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LogicalSwitchExists provides a mock function with given fields: lswitch
func (_m *Client) LogicalSwitchExists(lswitch string) (bool, error) {
	ret := _m.Called(lswitch)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(lswitch)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(lswitch)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OpenFlowPorts provides a mock function with given fields:
func (_m *Client) OpenFlowPorts() (map[string]int, error) {
	ret := _m.Called()

	var r0 map[string]int
	if rf, ok := ret.Get(0).(func() map[string]int); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]int)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSwitchPortAddresses provides a mock function with given fields: name, addresses
func (_m *Client) UpdateSwitchPortAddresses(name string, addresses []string) error {
	ret := _m.Called(name, addresses)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []string) error); ok {
		r0 = rf(name, addresses)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
